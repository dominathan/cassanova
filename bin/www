#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('cassanova:server');
var http = require('http');
var CronExecutables = require('../services/cronTasks');

var env = process.env.NODE_ENV || 'development';
var config = require("../knexfile");
var knex = require('knex')(config[env]);

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, function() {
    console.log('listening on port', port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * CronJob for setting interval to send messages;
 */
// var CronJob = CronJob.CronJob;


/**
 * Connect to socket.io
 */
 var io = require('socket.io').listen(server);
 var cronTasks = CronExecutables(io);
 io.on('connection', function(socket) {
   socket.on('new:response',function(response) {
     knex('responses')
       .insert(response)
       .returning('*')
       .then(function(knexResponse) {
         io.emit('new:response', knexResponse[0]);
       })
   });
   socket.on('new:vote', function(data) {
     knex('votes')
      .insert(data)
      .returning('*')
      .then(function(knexVote) {
        io.emit('new:vote',knexVote)
      })
   })

   socket.on('new:chat', function(data) {
     var objToSave = {room_id: parseInt(data.room_id), text: data.text};
     knex('chats')
     .insert(objToSave)
     .returning('*')
     .then(function(data) {
       io.emit('new:chat',data[0])
     })
   })
 })



 /**
  * Normalize a port into a number, string, or false.
  */

function normalizePort(val) {
        var port = parseInt(val, 10);
        if (isNaN(port)) {
            // named pipe
            return val;
        }
        if (port >= 0) {
            // port number
            return port;
        }
        return false;
    }
    /**
     * Event listener for HTTP server "error" event.
     */

function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }
        var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }
    /**
     * Event listener for HTTP server "listening" event.
     */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
